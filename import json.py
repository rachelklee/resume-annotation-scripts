import json
from operator import index
from typing import final
import pandas as pd
import os
import warnings

def ingest_data(filename):
    """turns MAT json output file into a dataframe

    Args:
        filename (str): json file generated by MAT

    Returns:
        pandas dataframe: json file formatted as pandas dataframe
    """
    full_filepath = r"C:\Users\rachellee\Desktop\Resumes\Reviewed"+"\\"+str(filename)
    #print(full_filepath)
    data=json.load(open(full_filepath, encoding="utf8"))
    #print(data.keys())
    df=pd.DataFrame(data["asets"])
    signal = data["signal"]
    #print(df.columns)
    #df=df.drop("hasSpan")
    df=df.drop(axis=0,index=[0,1])
    return filename,df,signal

def final_dataframes(filename,df,signal):
    """given pandas dataframe and full text associated with filename formats indexes from dataframe into readable text format
    ex: turns [0,2] into corresponding text based on signal
    *IMPORTANT NOTE: indexing by 2, [2:], is done to ignore first two rows because of unnecessary information

    Args:
        filename (str): json file generated by MAT
        df (pandas df): dataframe generated by ingest_data
        signal (str): full text of filename

    Returns:
        pandas df: formatted dataframe with following columns, Filename, label, text
        pandas df: formatted dataframe with following columns, Filename, label, text
    """
    finalspanlessdf=pd.DataFrame()
    finalspandf=pd.DataFrame()

    # df[annots][2:] is the df of all annotations minus the 1st 2 rows (not meaningful)
    for i in range(len(df["annots"][0:])):

        # annotation label
        #label = list(df['type'][0:])[i]
        #print(label)
        # get annotation value, which is usually a list of indexes because most annotations are spanned
        listofindexes=list(df["annots"][0:])[i]

        # empty annotation
        if len(listofindexes)==0:
            continue

        # pass on segment (first row of json with whole resume)
        elif list(df['type'][0:])[i] == "SEGMENT":
            continue
                
        # spanless
        elif isinstance(listofindexes[0][0], str):
            warnings.filterwarnings("ignore")
            row = {'Filename':filename,'Label':list(df['type'][0:])[i],'text':listofindexes[0][0]}
            finalspanlessdf=finalspanlessdf.append(row,ignore_index=True)

        # spanned 
        else:
            for indexpair in listofindexes:
                text=signal[indexpair[0]:indexpair[1]]
                warnings.filterwarnings("ignore")
                row = {'Filename':filename,'Label': list(df['type'][0:])[i],'text':text}
                finalspandf = finalspandf.append(row, ignore_index=True)

    finalspanlessdf = finalspanlessdf.drop_duplicates()
    finalspandf = finalspandf.drop_duplicates()
    return finalspanlessdf,finalspandf


if __name__ == "__main__":
    #create lists for dataframes
    spanlessframes = [] 
    spanframes = []
    
    #loop over given directory to run functions
    for file in os.listdir(r"C:\Users\rachellee\Desktop\Resumes\Reviewed"):
        filename,df,signal=ingest_data(file)
        finalspanlessdf,finalspandf=final_dataframes(filename,df,signal)

        #add dataframes to lists
        spanlessframes.append(finalspanlessdf)
        spanframes.append(finalspandf)

    #create final dataframes
    spanlessresult=pd.concat(spanlessframes)
    spanresult=pd.concat(spanframes)
    #print(spanframes)

    #combine
    #frames = [spanlessresult,spanresult]
    #result = pd.concat(frames)
    
    #print to excel
    spanlessoutfile = r"C:\Users\rachellee\Desktop\Resumes\Analysis\spanless_annotations.xlsx"
    spannedoutfile = r"C:\Users\rachellee\Desktop\Resumes\Analysis\spanned_annotations.xlsx"

    spanlesssheet=spanlessresult.to_excel(spanlessoutfile)
    spansheet=spanresult.to_excel(spannedoutfile)

    #all=result.to_excel("isha_iaa.xlsx")